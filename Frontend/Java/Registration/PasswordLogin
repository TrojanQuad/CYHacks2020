
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;

public class PasswordLogin {
    
    //This is the file where the credentials will be stored. 
    
    public static final File file = new File("CredentialStorage");
    public static void createNewUser(String username, String password) throws IOException, Exception{
       
        FileWriter writeNewUser = new FileWriter(file, true);
        PrintWriter printNewUser = new PrintWriter(writeNewUser);
        
        if(checkUsername(username) == true){
            printNewUser.println("--U" + PasswordCrypto.encrypt(username) + "-p-" + PasswordCrypto.encrypt(password));
            printNewUser.close();
            accountAlert.display("Registration Success", "Login to access account");
        } else{
            accountAlert.display("Registration Error", "Username in use");
        }   
    } 
    //This method checks new usernames to see if they are in already in use or if they exist in the file. Returns a false if the username cannot be used.
    public static boolean checkUsername(String username) throws FileNotFoundException, Exception{
        Scanner scanner = new Scanner(file); 
        String lineFromFile;
  	while(scanner.hasNextLine()){
            lineFromFile = scanner.nextLine(); 
        
            if(PasswordCrypto.decrypt(lineFromFile.substring(3, lineFromFile.indexOf("-p-"))).equals(username)){
                return false;
            }
        }
        return true; 
    } 

//This method tests a returning username and password. Returns a true if two back to back lines match
    public static boolean checkPassword(String password, String username) throws FileNotFoundException, IOException, Exception{
        
        Scanner scanner = new Scanner(file); 
        String lineFromFile; 
        while(scanner.hasNextLine()){
            lineFromFile = scanner.nextLine(); 
             
            if(PasswordCrypto.decrypt(lineFromFile.substring(3,lineFromFile.indexOf("-p-"))).equals(username)
                    && PasswordCrypto.decrypt(lineFromFile.substring(lineFromFile.indexOf("-p-")+ 3)).equals(password)){
                return true;
            
            }
    
        }
        return false; 
    }
    
    //This method checks to see if the username and password meet length requirements and then sends it to be checked by the system
    static void checkNewInput() throws IOException, Exception {
      if(checkNewUser() == false  || checkNewPassword() == false){
         accountAlert.display("Registration Error", "Username or Password not found" );
      }else{
        createNewUser(userAccount.username.getText(), userAccount.password.getText()); 
      }
    }
    //This checks the password to see if it is 8 characters 
    static boolean checkNewPassword(){
        return !(userAccount.password.getText().isEmpty()== true || userAccount.password.getLength() < 8 );
    }
    //This checks to see if the username is 8 characters 
    static boolean checkNewUser(){
        return !(userAccount.username.getText().isEmpty()==true || userAccount.username.getLength() <8); 
    }
    //getter method for file.
    static File getCredentialStorage(){
        return file; 
    }      
    
    public static void LoginReturningUser() throws FileNotFoundException, IOException, Exception{
    if(PasswordLogin.checkPassword(Signin.username.getText(),Signin.password.getText()) == true ){
    FrontendMain.window.setScene(FrontendMain.PersonalAccountScene);
    }else{
    accountAlert.display("Login Error ", "Username or Password is Wrong");
    }
    }
}