
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;


public class PasswordCrypto {
    public static final transient String key = "123";  //This is a nonsteralizable key that is ued in the cipher
    
    
    public static String encrypt(String strClearText) throws Exception{
	try {   
            byte[] keyData = (key).getBytes();
            SecretKeySpec secretKeySpec = new SecretKeySpec(keyData, "Blowfish"); //This was going to be used for a blowfish cipher keeping here for now
            Cipher cipher = Cipher.getInstance("Blowfish"); //Creates an instance of the cipher 
            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec); //Sets the mode of the cipher to decrypt. 
            byte[] hasil = cipher.doFinal(strClearText.getBytes()); //Byte array of the clear text that is  encoded in the string. 
            return new String(Base64.getEncoder().encode(hasil)); //Returns the string that is written to the file. 
            
            
	} catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {
                return null;
	}
}
    
    public static String decrypt(String strEncrypted) throws Exception{
	try {
            byte[] keyData = (key).getBytes();
            SecretKeySpec secretKeySpec = new SecretKeySpec(keyData, "Blowfish"); 
            Cipher cipher = Cipher.getInstance("Blowfish");
            cipher.init(Cipher.DECRYPT_MODE,secretKeySpec);
            byte[] hasil = cipher.doFinal(java.util.Base64.getDecoder().decode(strEncrypted));
            return new String(hasil);
	} catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {
		throw new Exception(e);
	}

}
    
}
