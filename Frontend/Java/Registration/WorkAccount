import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;

public class WorkAccount{
    public static TabPane workTabPane = new TabPane();
    public static Tab passStorage = new Tab("Password Storage", WorkAccountStorage());
    public static Tab passStrength = new Tab("Password Strength", WorkAccountStrength());
    public static Tab userAccount = new Tab("User Account", WorkUserAccount());
    public static Tab brute = new Tab("Brute Force", BruteForce());
    
    public static Pane WorkAccountHolder(){
        BorderPane workTopMenu = new BorderPane();  
        workTopMenu.setPadding(new Insets(5,5,5,5)); 
        workTopMenu.setTop(workTabPane);
       return workTopMenu;
    }
    
    public static Pane WorkAccountStorage(){
        TextField storageUserName = new TextField();
        PasswordField storagePassWord = new PasswordField();
        TextField storageAccount = new TextField();
        Button storageSubmit = new Button("Store");
        ScrollPane storedPassword = new ScrollPane();
        GridPane storedInfo = new GridPane();
        CheckBox changePassword = new CheckBox("Remind me to change my password");
            
        GridPane workStoragePane = new GridPane();
        workStoragePane.setPadding(new Insets(6, 6, 6, 6));
        workStoragePane.setAlignment(Pos.CENTER);
        workStoragePane.setHgap(5);
        workStoragePane.setVgap(5);
        workStoragePane.add(new Label("User:"), 0, 0);
        workStoragePane.add(storageUserName, 1, 0);
        workStoragePane.add(new Label("Password: "), 2, 0);
        workStoragePane.add(storagePassWord, 3, 0);
        workStoragePane.add(new Label("Account: "),4, 0);
        workStoragePane.add(storageAccount, 5, 0);
        workStoragePane.add(storageSubmit, 3, 1);
        workStoragePane.add(changePassword, 0, 1, 3, 1);
        workStoragePane.add(storedPassword, 0, 2, 6, 1);
        storedPassword.setContent(storedInfo);
        
        try {
            if(StorageBackEnd.CheckRemind().length() > 0){
                workStoragePane.add(new Label(StorageBackEnd.CheckRemind()), 4, 1, 3, 1);
            }
        } catch (FileNotFoundException ex) {
            
        }
        
        try{
            ArrayList<String> user = new ArrayList<>();
            ArrayList<String> password = new ArrayList<>();
            ArrayList<String> account = new ArrayList<>();
            Scanner scanner = new Scanner(StorageBackEnd.GetFile());
            int count = 0;
            String line = "";
            while(scanner.hasNextLine()){
                line = scanner.nextLine();
                switch (line.substring(0, 2)) {
                    case "-U":
                        storedInfo.add(new Label("Username: " + line.substring(2)), 0, count);
                        break;
                    case "-P":
                        storedInfo.add(new Label(" Password: " + line.substring(2)), 1, count - 1);
                        break;
                    case "-A":
                        storedInfo.add(new Label(" Account: " + line.substring(2)), 2, count - 2);
                        break;
                    default:
                        break;
                }
                count++;
            }
            } catch (FileNotFoundException ex) {
            Logger.getLogger(WorkAccount.class.getName()).log(Level.SEVERE, null, ex);
        }
            
        storageSubmit.setOnAction(e -> {
            String userInput = storageUserName.getText();
            String passInput = storagePassWord.getText();
            String accountInput = storageAccount.getText();
                
            if(StorageBackEnd.ValidInput(userInput, passInput, accountInput, changePassword.isSelected())){
                try {
                    StorageBackEnd.Store();
                    Scanner newScanner = new Scanner(StorageBackEnd.GetFile());
                    GridPane newStoredInfo = new GridPane();
                    int count = 0;
                    String line = "";
                    while(newScanner.hasNextLine()){
                    line = newScanner.nextLine();
                    switch (line.substring(0, 2)) {
                        case "-U":
                            newStoredInfo.add(new Label("Username: " + line.substring(2)), 0, count);
                            break;
                        case "-P":
                            newStoredInfo.add(new Label(" Password: " + line.substring(2)), 1, count - 1);
                            break;
                        case "-A":
                            newStoredInfo.add(new Label(" Account: " + line.substring(2)), 2, count - 2);
                            break;
                        default:
                            break;
                    }
                    count++;
                    }
                    storedPassword.setContent(newStoredInfo);
                } catch (IOException ex) {
                    Logger.getLogger(WorkAccount.class.getName()).log(Level.SEVERE, null, ex);
                }
                   
            }
            else{
                workStoragePane.add(new Label("Invalid username or password"), 4, 1, 2, 1);
            }
        });
        
        return workStoragePane;
    }
    
    public static Pane WorkAccountStrength(){
        Label password = new Label("Password: ");
        TextField userPassword = new TextField();
        Button check = new Button("Check");
        Label suggestPassword = new Label("Suggested Password: ");
        
        GridPane workStrengthPane = new GridPane();
        workStrengthPane.setPadding(new Insets(6, 6, 6, 6));
        workStrengthPane.setAlignment(Pos.CENTER);
        workStrengthPane.setHgap(5);
        workStrengthPane.setVgap(5);
        workStrengthPane.add(password, 0, 0);
        workStrengthPane.add(userPassword, 1, 0);
        workStrengthPane.add(check, 2, 0);
        workStrengthPane.add(suggestPassword, 0, 1, 3, 1);
        
        return workStrengthPane;
    }
    
    public static Pane WorkUserAccount(){
        PasswordField newPassword = new PasswordField();
        PasswordField confirmPassword = new PasswordField();
        Button change = new Button("Change");
        
        GridPane workAccountPane = new GridPane();
        workAccountPane.setPadding(new Insets(6, 6, 6, 6));
        workAccountPane.setAlignment(Pos.CENTER);
        workAccountPane.setHgap(5);
        workAccountPane.setVgap(5);
        workAccountPane.add(new Label("Change Password: "), 0, 0);
        workAccountPane.add(newPassword, 1, 0);
        workAccountPane.add(new Label("Confirm Password: "), 0, 1);
        workAccountPane.add(confirmPassword, 1, 1);
        workAccountPane.add(change, 1, 2);
        
        change.setOnAction(e -> {
            if(newPassword.getText().equals(confirmPassword.getText())){
                UserAccountBackEnd.ChangePassword(newPassword.getText());
                workAccountPane.add(new Label("Password changed successfully"), 2, 2);
            }
            else{
                workAccountPane.add(new Label("Passwords don't match"), 2, 2);
            }
        });
        
        return workAccountPane;
    }
    
    public static Pane BruteForce(){
        TextField target = new TextField("Target");
        TextField port = new TextField("Port");
        TextField dict = new TextField("Dict");
        Button go = new Button("Go");
        ComboBox type = new ComboBox();
        type.getItems().add("SSH");
        
        GridPane bruteForcePane = new GridPane();
        bruteForcePane.setPadding(new Insets(6, 6, 6, 6));
        bruteForcePane.setAlignment(Pos.CENTER);
        bruteForcePane.setHgap(5);
        bruteForcePane.setVgap(5);
        bruteForcePane.add(target, 2, 0);
        bruteForcePane.add(port, 4, 0);
        bruteForcePane.add(dict, 2, 2);
        bruteForcePane.add(go, 4, 2);
        bruteForcePane.add(type, 0, 0);
        
        return bruteForcePane;
    }
}
